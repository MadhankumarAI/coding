1980. Find Unique Binary String
Solved
Medium
Topics
Companies
Hint
Given an array of strings nums containing n unique binary strings each of length n, return a binary string of length n that does not appear in nums. If there are multiple answers, you may return any of them.

 

Example 1:

Input: nums = ["01","10"]
Output: "11"
Explanation: "11" does not appear in nums. "00" would also be correct.
Example 2:

Input: nums = ["00","01"]
Output: "11"
Explanation: "11" does not appear in nums. "10" would also be correct.
Example 3:

Input: nums = ["111","011","001"]
Output: "101"
Explanation: "101" does not appear in nums. "000", "010", "100", and "110" would also be correct.


  ans: class Solution:
    def findDifferentBinaryString(self, nums: List[str]) -> str:
        return ''.join('1' if nums[i][i]=='0' else '0' for i in range(len(nums)))
%%%% the brute force approach would be to find all the combinations and store in a list and compare it with the given list but that will have a space and time complexity of 2 power n . so we make use of counter diagonization method: which says that some infinties are greater than other infinites . here we create a string- binary digit by flipping the vakues of the ith sting element of the ith string . it will always guarentee a solution.


R:  3,039,156
------------------------------------------------------------

############# quick sort
def qs(a):
    if len(a)<1:
        return a
    p=a[len(a)//2]
    l=[x for x in a if x<p]
    r=[x for x in a if x>p]
    m=[x for x in a if x==p]
    return qs(l)+m+qs(r)
a=[2,4,1,7]
print(qs(a))  # [1, 2, 4, 7] b=nlogn 

def partition(a,l,h): # lomoto scheme for inplace sorting
    p=a[h] # always take the highest
    i=l-1 
    for j in range(i,h):
        if a[j]<p:
            i+=1
            a[i],a[j]=a[j],a[i] # place small elemnts to the left of the pivot and larger ones to the right
    a[i+1],a[h]=a[h],a[i+1] # place the pivot element in its right position
    return i+1 # return the pivot index
def qs_inplace(a,l,h):
    if l<h:
        p=partition(a,l,h)
        qs_inplace(a,l,p-1)
        qs_inplace(a,p+1,h)
a=[23,10,78]
qs_inplace(a,0,len(a)-1) # [10, 23,78]
print(a)
