  ,



class Stack:
    def __init__(self,m):
        self.a=[None]*m
        self.m=m
        self.top=-1
    def push(self,n):
        if self.isfull():
            print("full")
            return None
        else:
            self.top+=1
            self.a[self.top]=n
            print(self.a)
            
    def pop(self):
        if self.isempty():
            print("empty")
            return None
        else:
            item=self.a[self.top]
            self.a[self.top]=None
            self.top-=1
            print("popped",item)
            return item
    def peek(self):
        if self.isempty():
            return None
        else:
            return self.a[self.top]
    def isempty(self):
        if self.top==-1:
            return True
        return False
    def isfull(self):
        if self.top==self.m-1:
            return True
        return False
maxsize=int(input())
a=Stack(maxsize)
a.push(10)
a.push(20)
a.pop()
a.peek()
            

class S:
    def __init__(self):
        self.a = []
        self.top = -1

    def push(self, item):
        self.a.append(item)
        self.top += 1

    def pop(self):
        if self.isempty():
            return None  # Return None if the stack is empty
        self.top -= 1
        return self.a.pop()  # Simply pop from the list

    def isempty(self):
        return self.top == -1

    def peek(self):
        if self.isempty():
            return None
        return self.a[self.top]


def precedence(c):
    if c in ['*', '/']:
        return 2
    if c in ['+', '-']:
        return 1
    if c == '^':
        return 3
    return 0


def associativity(c):
    # Right-to-left associativity for '^'
    if c == '^':
        return 'right'
    return 'left'


def isoperand(n):
    return n.isalnum()  # Check if the character is an operand (alphanumeric)


def itp(e):
    s = S()
    p = []

    for i in e:
        if isoperand(i):  # If the character is an operand
            p.append(i)
        elif i == '(':  # Left parenthesis, push to stack
            s.push(i)
        elif i == ')':  # Right parenthesis, pop until '('
            while not s.isempty() and s.peek() != '(':
                p.append(s.pop())
            s.pop()  # Pop '('
        else:
            # Handle operators based on precedence and associativity
            while (not s.isempty() and 
                   (precedence(s.peek()) > precedence(i) or
                    (precedence(s.peek()) == precedence(i) and associativity(i) == 'left'))):
                p.append(s.pop())

            s.push(i)

    # Pop remaining operators from stack
    while not s.isempty():
        p.append(s.pop())

    return ''.join(p)


# Example usage
e = input("Enter an infix expression: ")
x = itp(e)
print("Postfix expression:", x)

 
class S:
    def __init__(self):
        self.a = []

    def push(self, i):
        self.a.append(i)

    def pop(self):
        if self.isempty():
            return None
        else:
            return self.a.pop()

    def isempty(self):
        return len(self.a) == 0


def isoperand(n):
    return n.isalnum()  # Check if the character is a digit


def pe(e):
    s = S()

    for i in e:
        if i.isdigit():  # If it's an operand (digit), push it to the stack
            s.push(int(i))  # Convert to integer before pushing
        elif isoperand(i):
            s.push(i)
        else:  # If it's an operator
            k = s.pop()  # Right operand
            l = s.pop()  # Left operand
            if k.isdigit() and l.isdigit():

                if i == '+':
                    s.push(l + k)
                elif i == '-':
                    s.push(l - k)
                elif i == '*':
                    s.push(l * k)
                elif i == '/':
                    s.push(l / k)
                elif i == '^':
                    s.push(l ** k)  # Exponentiation
            else:
                s.push(k+i+l)

    return s.pop()  # Final result will be the last item in the stack


if __name__ == "__main__":
    e = input("Enter postfix expression: ")
    x = pe(e)
    print("Result:", x)



class Q:
    def __init__(self,m=None):
        self.a=[None]*m
        self.m=m
        self.front=0
        self.back=-1
        self.size=0
    def enqueue(self,item):
        if self.isfull():
            return None
        else:
            self.back+=1
            self.a[self.back]=item
            self.size+=1
            print(self.a)
    def dequeue(self):
        if self.isempty():
            return None
        else:
            i=self.a[self.front]
            self.a[self.front]=None
            self.front+=1
            self.size-=1
            print(self.a)
            return i
    def peek(self):
        if self.isempty():
            return None
        print(self.a[self.front])
        return self.a[self.front]
    def isempty(self):
        if self.size==0:
            return True
        return False
    def isfull(self):
        return self.size==self.m
if __name__=="__main__":
    m=int(input())
    q=Q(m=m)
    q.enqueue(10)
    q.enqueue(20)
    q.dequeue()
    q.peek()

,

class cq:
    def __init__(self,m=None):
        self.a=[None]*m
        self.f=-1
        self.b=-1
        self.s=0
        self.m=m
    def e(self,i):
        if self.full():
            return None
        if self.f==-1:
            self.f=0
        self.b=(self.b+1)%self.m
        self.a[self.b]=i
        self.s+=1
        print(self.a)
    def d(self):
        if self.empty():
            return None
        i=self.a[self.f]
        self.a[self.f]=None
        self.f=(self.f+1)%self.m
        self.s-=1
        print(self.a)
    def full(self):
        return self.s==self.m
    def empty(self):
        return self.s==0
if __name__=="__main__":
    m=int(input())
    q=cq(m=m)
    q.e(10)
    q.e(20)
    q.e(30)
    q.d()
    q.e(10)

class DynamicQueue:
    def __init__(self):
        """Initialize an empty queue."""
        self.queue = []  # List to store queue elements
        self.front = 0   # Pointer to the front of the queue
        self.back = 0    # Pointer to the back of the queue

    def enqueue(self, item):
        """Add an element to the back of the queue."""
        # Simulating append without append() method
        if self.back == len(self.queue):
            self.queue.append(None)  # Create space for the new item
        self.queue[self.back] = item  # Add item at the back
        self.back += 1  # Increment the back pointer
        print(f"Enqueued: {item}")

    def dequeue(self):
        """Remove and return the front element of the queue."""
        if self.is_empty():
            print("Queue is empty! Cannot dequeue.")
            return None
        item = self.queue[self.front]  # Get the front element
        self.front += 1  # Increment the front pointer

        # Optional: Clean up the list (if desired) to keep it compact
        if self.front > len(self.queue) // 2:
            self.queue = self.queue[self.front:]  # Truncate the list for efficiency
            self.front = 0
            self.back = len(self.queue)
        
        return item

    def peek(self):
        """Return the front element without removing it."""
        if self.is_empty():
            return "Queue is empty!"
        return self.queue[self.front]

    def is_empty(self):
        """Check if the queue is empty."""
        return self.front == self.back

    def display(self):
        """Display the elements in the queue."""
        if self.is_empty():
            return "Queue is empty!"
        return self.queue[self.front:self.back]

    def size(self):
        """Return the current size of the queue."""
        return self.back - self.front
# Create a dynamic queue
dq = DynamicQueue()

# Enqueue elements
dq.enqueue(10)
dq.enqueue(20)
dq.enqueue(30)

# Display the queue
print("Queue after enqueuing:", dq.display())

# Peek the front element
print("Front element:", dq.peek())

# Dequeue elements
print("Dequeued:", dq.dequeue())
print("Dequeued:", dq.dequeue())

# Display the queue after dequeue
print("Queue after dequeuing:", dq.display())

# Enqueue more elements
dq.enqueue(40)
dq.enqueue(50)

# Display the queue
print("Queue after further enqueue:", dq.display())

# Check size of the queue
print("Queue size:", dq.size())

# Dequeue the remaining elements
print("Dequeued:", dq.dequeue())
print("Dequeued:", dq.dequeue())

# Display the queue after all dequeues
print("Queue after all dequeues:", dq.display())

   ,

class node:
    def __init__(self,d):
        self.d=d
        self.next=None
class sll:
    def __init__(self):
        self.head=None
    def fapp(self,i):
        n=node(i)
        n.next=self.head
        self.head=n
    def bapp(self,i):
        n=node(i)
        if not self.head:
            self.head=n
            return 
        c=self.head
        while c.next:
            c=c.next
        c.next=n
    def display(self):
        t=self.head
        while t:
            print(f"{t.d}->",end="")
            t=t.next
        print("None")
    def fpop(self):
        if not self.head:
            print("empty")
            return None
        k=self.head
        self.head=k.next
        print("poped",k.d)
        k.next=None
    def bpop(self):
        t=self.head
        if t is None:
            return None
        while t.next and t.next.next:
            t=t.next
        print("poped",t.next.d)
        t.next=None
        


    def search(self,i):
        k=1
        t=self.head
        while t.next:
            if t.d==i:
                print("found",k)
                break
            t=t.next
            k+=1
            
s=sll()
s.fapp(10)
s.display()
s.fapp(20)
s.display()
s.bapp(30)
s.display()
s.search(10)   
s.fpop()
s.bpop()
s.display()
---------------------------------------------------------------------------------
class node:
    def __init__(self,data):
        self.data=data
        self.pre=None
        self.next=None
class d:
    def __init__(self):
        self.head=None
    def fpush(self,item):
        n=node(item)
        if not self.head:
            self.head=n
            return
        n.next=self.head
        self.head.prev=n
        self.head=n
    def bpush(self,item):
        n=node(item)
        if not self.head:
            self.head=n
            return 
        t=self.head
        while t.next:
            t=t.next
        t.next=n
        n.prev=t
    def fpop(self):
        if not self.head:
            return
        k=self.head
        if k.next:
            self.head=k.next
            self.head.prev=None
        k.next=None
    def bpop(self):
        if not self.head:
            return 
        if self.head.next is None:
            self.head=None
            return 
        t=self.head
        while t.next:
            t=t.next
        t.prev.next=None
        t.next=None
        t.prev=None
    def df(self):
        if not self.head:
            print("empty")
            return 
        t=self.head
        
        while t:
            print(f"{t.data}c->",end="")
            t=t.next
        print("None")
o=d()
o.fpush(10)
o.df()
o.bpush(20)
o.df()
o.fpush(30)
o.df()
o.fpop()
o.df()
o.bpop()
o.df()
----------------------------------------------------------------------    
class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class cs:
    def __init__(self):
        self.head=None
        
    def fpush(self,item):
        n=node(item)
        if not self.head:
            self.head=n
            self.head.next=self.head
            return
        t=self.head
        while t.next!=self.head:
            t=t.next
        n.next=self.head
        t.next=n
        self.head=n

    def bpush(self,item):
        n=node(item)
        if not self.head:
            self.head=n
            self.head.next=self.head
            return
        t=self.head
        while t.next!=self.head:
            t=t.next
        t.next=n
        n.next=self.head
    def d(self):
        if not self.head:
            return 
        t=self.head
        while t.next!=self.head:
            print(f"{t.data}->",end="")
            t=t.next
        print(f"{t.data}->[{self.head.data}]")
    def fpop(self):
        if not self.head:
            return 
        
        t=self.head
        while t.next!=self.head:
            t=t.next
        self.head=self.head.next
        t.next=self.head
    def bpop(self):
        if not self.head:
            return
        if not self.head.next:
            self.head=None
            return
        t=self.head
        while t.next.next!=self.head:
            t=t.next
        t.next.next=None
        t.next=self.head
       
    
        



o=cs() 
o.fpush(10)
o.d()
o.bpush(20)
o.d()
o.fpush(30)
o.d()
o.fpop()
o.d()
o.bpop()
o.d()

10->[10]
10->20->[10]
30->10->20->[30]
10->20->[10]
10->[10]

----------------------------------------------------------------

class node:
    def __init__(self,data):
        self.data=data
        self.prev=None
        self.next=None
class cd:
    def __init__(self):
        self.head=None
    def fpush(self,item):
        n=node(item)
        if not self.head:
            self.head=n
            self.head.next=self.head
            self.head.prev=self.head
        if not self.head.next:
            n.next=self.head
            self.head.prev=n
            self.head.next=n
            n.prev=self.head
            self.head=n
        t=self.head
        while t.next!=self.head:
            t=t.next
        n.next=self.head
        self.head.prev=n
        t.next=n
        n.prev=t
        self.head=n

    def bpush(self,item):
        n=node(item)
        if not self.head:
            self.head=n
            self.head.next=self.head
            self.head.prev=self.head
        if not self.head.next:
            self.head.next=n
            n.prev=self.head
            self.head.prev=n
            n.next=self.head
        t=self.head
        while t.next!=self.head:
            t=t.next
        t.next=n
        n.next=self.head
        self.head.prev=n
    def d(self):
        if not self.head:
            return
        t=self.head
        while t.next!=self.head:
            print(f"{t.data}c->",end="")
            t=t.next
        print(f"{t.data}")
        print(f"prev first ={t.data}\nnext of last={self.head.data}")
        print("--------------------")
o=cd()
o.fpush(10)
o.d()
o.bpush(20)
o.d()
o.fpush(30)
o.d()

10
prev first =10
next of last=10
--------------------
10c->20
prev first =20
next of last=10
--------------------
30c->10c->20
prev first =20
next of last=30
--------------------
-----------------------------------------------------
class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class s:
    def __init__(self):
        self.head=None
    def bpush(self,item):
        n=node(item)
        if not self.head:
            self.head=n
            return
        t=self.head
        while t.next:
            t=t.next
        t.next=n
    def concat(self,k):
        t=self.head
        while t.next:
            t=t.next
        t.next=k.head
    def d(self):
        t=self.head
        while t:
            print(f"{t.data}->",end="")
            t=t.next
        print("None")
o1=s()
o2=s()
o1.bpush(10)
o1.bpush(20)
o1.d()
o2.bpush(30)
o2.bpush(40)
o2.d()
o1.concat(o2)
o1.d()

10->20->None
30->40->None
10->20->30->40->None

--------------------------------------------
class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class s:
    def __init__(self):
        self.head=None
    def bpush(self,item):
        n=node(item)
        if not self.head:
            self.head=n
            return
        t=self.head
        while t.next:
            t=t.next
        t.next=n
    def reverse(self):
        t=self.head
        new=None
        while t:
            nextnode=t.next
            t.next=new
            new=t
            t=nextnode
        self.head=new
    def d(self):
        t=self.head
        while t:
            print(f"{t.data}->",end="")
            t=t.next
        print("None")
o=s()
o.bpush(10)
o.bpush(20)
o.d()
o.reverse()
o.d()

10->20->None
20->10->None

---------------------------------

class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class s:
    def __init__(self):
        self.head=None
    def bpush(self,item):
        n=node(item)
        if not self.head:
            self.head=n
            return
        t=self.head
        while t.next:
            t=t.next
        t.next=n
    def il(self,item,key):
        n=node(item)
        if not self.head:
            print("empty")
            return
        if not self.head.next:
            n.next=self.head
            self.head=n
            return
        t=self.head
        while t.next.data!=key:
            t=t.next
        n.next=t.next
        t.next=n
        
    def d(self):
        t=self.head
        while t:
            print(f"{t.data}->",end="")
            t=t.next
        print("None")
    def ir(self,item,key):
        n=node(item)
        if not self.head:
            return
        if self.head.next is None:
            n=node(item)
            self.head.next=n
        t=self.head
        while t.data!=key:
            t=t.next
        n.next=t.next
        t.next=n
o=s()
o.bpush(10)
o.bpush(20)
o.d()
o.il(30,20)
o.d()
o.ir(40,30)
o.d()

10->20->None
10->30->20->None
10->30->40->20->None

---------------------------------

class node:
    def __init__(self,data):
        self.data=data
        self.next=None
class s:
    def __init__(self):
        self.head=None
    def bpush(self,item):
        n=node(item)
        if not self.head:
            self.head=n
            return
        t=self.head
        while t.next:
            t=t.next
        t.next=n

    def mergesort(self,k):
        t=self.head
        while t.next:
            t=t.next
        t.next=k.head
        
        s=True
        while s:
            t=self.head
            s=False
            while t and t.next:
                if t.data>t.next.data:
                    t.data,t.next.data=t.next.data,t.data
                    s=True
                t=t.next
    def d(self):
        t=self.head
        while t:
            print(f"{t.data}->",end="")
            t=t.next
        print("None")
o1=s()
o2=s()
o1.bpush(20)
o1.bpush(10)
o2.bpush(40)
o2.bpush(10)
o1.d()
o2.d()
o1.mergesort(o2)
o1.d()

---------------------------------------

class node:
    def __init__(self,data):
        self.data=data
        self.l=None
        self.r=None
class t:
    def __init__(self):
        self.root=None
    def add(self,item):
        n=node(item)
        if not self.root:
            self.root=n
            return
        q=[self.root]
        while q:
            t=q.pop(0)
            if not t.l:
                t.l=n
                return
            else:
                q.append(t.l)
            if not t.r:
                t.r=n
                return 
            else:
                q.append(t.r)
    def d(self):
        q=[self.root]
        while q:
            t=q.pop(0)
            print(t.data,end=" -")
            if t.l:
                q.append(t.l)
            if t.r:
                q.appenf(t.r)
o=t()
o.add(10)
o.add(20)
o.d()

--------------------------------------

class node:
    def __init__(self,data):
        self.data=data
        self.l=None
        self.r=None

class t:
    def __init__(self):
        self.root=None
    def add(self,item):
        n=node(item)
        if not self.root:
            self.root=n
            return
        q=[self.root]
        while q:
            t=q.pop(0)
            if not t.l:
                t.l=n
                return
            else:
                q.append(t.l)
                
            if not t.r:
                t.r=n
                return
            else:
                q.append(t.r)

    def l(self):
        q=[self.root]
        while q:
            t=q.pop(0)
            print(t.data,end="-")
            if t.l:
                q.append(t.l)
            if t.r:
                q.append(t.r)
        
    def inorder(self,nl):
        if nl:
            self.inorder(nl.l)
            print(nl.data,end="-")
            self.inorder(nl.r)
        
    def pre(self,n):
        if n:
            print(n.data,end="-")
            self.pre(n.l)
            self.pre(n.r)
        
    def post(self,n):
        if n:
            self.post(n.l)
            self.post(n.r)
            print(n.data,end="-")
o=t()
o.add(10)
o.add(20)
o.add(30)
o.add(40)
o.add(50)
print("level")
o.l()
print("inorder")
o.inorder(o.root)
print("pre")
o.pre(o.root)
print("post")
o.post(o.root)

level
10-20-30-40-50-

inorder
40-20-50-10-30-

pre
10-20-40-50-30-

post
40-50-20-30-10-

incase 40 has right child 60 and 60 has left child 70 then print 40 first and then go to right child in inorder 
--------------------------




